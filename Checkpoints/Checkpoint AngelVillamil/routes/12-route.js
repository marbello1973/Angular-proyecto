const router = require('express').Router();
const getBrandPrices = require('../controllers/06-controller');
/* ‚ö†Ô∏è No modificar nada arriba de esta l√≠nea ‚ö†Ô∏è

  1Ô∏è‚É£2Ô∏è‚É£ ***** EJERCICIO 12 ***** - GET /brands/:brandName/car-prices 1Ô∏è‚É£2Ô∏è‚É£:
  
  üü¢ Integrar la funci√≥n getBrandPrices que desarrollaste previamente (Ejercicio 6) para obtener el total de 
  los precios de los coches de una marca.
  üü¢ Responder con el resultado de la operaci√≥n, el formato debe ser: { results: 23000 }
  üü¢ Si surge alg√∫n error durante la operaci√≥n, responder con el mensaje correspondiente.
  üü¢ Responder con un error si el par√°metro "unused" llega como undefined o null.

    üì¢ PUNTOS A TENER EN CUENTA üì¢
  1) El par√°metro query "unused" es recibido como un string. Tendr√°s que ingeni√°rtelas para convertirlo en booleano.
  2) Si algo falla debes responder con el mensaje del error.
  3) ¬°Revisa en los test el status que deben tener tus respuestas!
*/


router.get("/brands/:brandName/car-prices", (req, res) => {
  const { brandName } = req.params;
  const { unused } = req.query;

  let myBoolean = (a) => {
    if (a === "true") return true;
    if (a === "false") return false;
  };

  const result = myBoolean(unused);

  if (unused && result === undefined) {
    return res.status(400).json({ error: "El par√°metro unused es inv√°lido" });
  }

  try {
    return res.status(200).json({ results: getBrandPrices(brandName, result) });
  } catch (error) {
    return res.status(404).json({ error: error.message });
  }
});

//‚ö†Ô∏è No modificar nada debajo de esta l√≠nea ‚ö†Ô∏è
module.exports = router;
